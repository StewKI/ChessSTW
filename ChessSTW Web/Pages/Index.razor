@page "/"
@using ChessLibrary;

<div class="game-container centered-content">
    <div class="grid-container">
        @for (int i = 0; i < Rows; i++)
        {
            @for (int j = 0; j < Columns; j++)
            {
                int y = i;
                int x = j;

                <div class="grid-item noselect @ClassFieldColor(i, j)" @onclick="(() => Click(y, x))">
                    @Chess.PieceToString(game.pieces[i, j])

                    <div class="circle-in-field @ClassValidField(i, j)" ></div>
                </div>
            }
        }
    </div>
</div>


@code {
    private const int Rows = 8;
    private const int Columns = 8;

    private Chess game = new Chess(() => 0);

    string ClassFieldColor(int i, int j)
    {
        string r;
        if (i == game.selectedPos.y && j == game.selectedPos.x)
        {
            r = "selected-field";
        }
        else if(game.validFields[i, j] && game.pieces[i, j] != Piece.Empty)
        {
            r = "attacked-field";
        }
        else 
        {
            if ((i + j) % 2 == 1)
            {
                r = "black-field";
            }
            else
            {
                r = "white-field";
            }
        }
        return r;
    }

    string ClassValidField(int i, int j)
    {
        string r = "";
        if (game.validFields[i, j] &&
            game.pieces[i, j] == Piece.Empty)
        {
            r = "valid-field";
        }
        return r;
    }

    void Click(int y, int x)
    {
        game.Click(y, x);
        Console.WriteLine($"clicked {y},{x}");
        InvokeAsync(StateHasChanged);
    }

}
