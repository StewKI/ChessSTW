@using ChessLibrary;
@using NetworkLibrary;
@using NetworkLibrary.Connections;
@using System.Net.WebSockets;

<div>
    <h1>@TextInfo</h1>
    <hr />
    <h2>Start new online game:</h2>
    <form>
        <div class="form-group">
            <label for="url">URL:</label>
            <input type="text" id="url" @bind="url" class="form-control" />
        </div>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="username" class="form-control" />
        </div>

        <div class="form-group">
            <label>Select a value:</label>
            @foreach (var option in valueOptions)
            {
                <div class="form-check">
                    <input type="radio" class="form-check-input" id="@option" name="value" @bind="selectedValue" />
                    <label class="form-check-label" for="@option">@option</label>
                </div>
            }
        </div>

        <button type="button" class="btn btn-primary" @onclick="ProcessInput">Accept</button>
    </form>

</div>


@code {

    [Parameter]
    public Chess? game { get; set; }
    [Parameter]
    public string url { get; set; }

    [Parameter]
    public EventCallback<Chess> gameChanged { get; set; }

    private string username = "";
    private string selectedValue = "Random";
    private string[] valueOptions = { "Random", "White", "Black" };

    private string TextInfo = "Local game";

    private async Task ProcessInput()
    {
        // Process the input data here, for example, display it in an alert.
        var message = $"Username: {username}, Selected Value: {selectedValue}";

        CColor? color = null;
        switch (selectedValue)
        {
            case "White":
                color = CColor.White;
                break;
            case "Black":
                color = CColor.Black;
                break;
        }
        ChessOnline onlineGame = new ChessOnline(() => 0 /*TODO PROMOTE*/, (Chess chess) => InvokeAsync(StateHasChanged), (string a) => { }, color, username, "");

        TextInfo = "Connecting...";

        using (ClientWebSocket client = new ClientWebSocket())
        {
            Uri serverUri = new Uri(url); //   "ws://localhost:6970"

            try
            {
                await client.ConnectAsync(serverUri, CancellationToken.None);
                onlineGame.Connect(new WebSocketConnection(client));
                TextInfo = "Connected. Waiting for response...";
                _ = WaitForResponse(onlineGame);
            }
            catch (Exception)
            {
                //TODO: alert about error
                TextInfo = "Offline game";
            }
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task WaitForResponse(ChessOnline onlineGame)
    {
        bool done = false;

        while (!done)
        {
            onlineGame.serverResponedEvent.WaitOne();
            switch (onlineGame.serverResponse)
            {
                case "welcome":

                    TextInfo = $"Opponent: {onlineGame.opponUsername}";
                    //rotateTable = onlineGame.myColor == CColor.Black;

                    if (game is ChessOnline)
                    {
                        _ = ((ChessOnline)game).Disconnect();
                    }
                    //game = onlineGame;
                    if (gameChanged.HasDelegate)
                    {
                        await gameChanged.InvokeAsync(onlineGame);
                    }
                        

                    //game = onlineGame;
                    //SetGame(onlineGame);
                    done = true;

                    break;

                case "waiting":

                    TextInfo = "Waiting for opponent...";

                    break;

                case "username":

                    TextInfo = "Offline game";
                    //MessageBox.Show("Username already taken!", "Username", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    done = true;

                    break;
            }
            InvokeAsync(StateHasChanged);
        }
    }
}
