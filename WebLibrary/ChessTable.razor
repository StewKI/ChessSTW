@using ChessLibrary;

<div class="grid-container">
    @for (int i = 0; i < Rows; i++)
    {
        @for (int j = 0; j < Columns; j++)
        {
            int y = i;
            int x = j;

            <div class="grid-item noselect @ClassFieldColor(i, j)" @onclick="(() => Click(y, x))">
                @Chess.PieceToString(game.pieces[i, j])

                <div class="circle-in-field @ClassValidField(i, j)"></div>
            </div>
        }
    }
</div>

@code {
    private const int Rows = 8;
    private const int Columns = 8;

    [Parameter]
    public Chess game { get; set; }
    [Parameter]
    public string FieldSize { get; set; }


    string ClassFieldColor(int i, int j)
    {
        string r;
        if (i == game.selectedPos.y && j == game.selectedPos.x)
        {
            r = "selected-field";
        }
        else if (game.validFields[i, j] && game.pieces[i, j] != Piece.Empty)
        {
            r = "attacked-field";
        }
        else
        {
            if ((i + j) % 2 == 1)
            {
                r = "black-field";
            }
            else
            {
                r = "white-field";
            }
        }
        return r;
    }

    string ClassValidField(int i, int j)
    {
        string r = "";
        if (game.validFields[i, j] &&
            game.pieces[i, j] == Piece.Empty)
        {
            r = "valid-field";
        }
        return r;
    }

    void Click(int y, int x)
    {
        game.Click(y, x);
        Console.WriteLine($"clicked {y},{x}");
        InvokeAsync(StateHasChanged);
    }
}

<style>

    
    :root {
        --field-size: @FieldSize;
    }

    .grid-container {
        display: grid;
        grid-template-columns: repeat(8, var(--field-size));
        grid-template-rows: repeat(8, var(--field-size));
        grid-gap: 0px; 
        border: 0.5vh ridge #2e1b0b;
    }
    
    .grid-item {
        width: var(--field-size);
        height: var(--field-size);
        border: 0px solid #000;
        text-align: center;
        line-height: var(--field-size);
        font-size: 30px;
    }
    
    .inner-border {
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        border: 0.2vh ridge #2e1b0b;
    }
    
    .white-field {
        background-color: rgb(245, 230, 180);
    }
    
    .black-field {
        background-color: rgb(105, 76, 43);
    }
    
    .selected-field {
        background-color: cadetblue;
    }
    
    .attacked-field {
        background-color: red;
    }
    
    .valid-field {
        background-color: black;
    }
    
    .circle-in-field {
        background-color : rgb(0, 0, 0, 0,00);
        position: relative;
        border-radius: 50%;
        width: 30%;
        height: 30%;
        left: 35%;
        top: 35%;
        pointer-events: none;
    }

    .noselect {
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none; /* Safari */
        -khtml-user-select: none; /* Konqueror HTML */
        -moz-user-select: none; /* Old versions of Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
        user-select: none; /* Non-prefixed version, currently
                                      supported by Chrome, Edge, Opera and Firefox */
    }

</style>